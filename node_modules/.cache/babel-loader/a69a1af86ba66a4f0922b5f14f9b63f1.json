{"remainingRequest":"/Users/hayden/MEGA/lq_app/frontend/node_modules/babel-loader/lib/index.js!/Users/hayden/MEGA/lq_app/frontend/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/hayden/MEGA/lq_app/frontend/src/store.js","dependencies":[{"path":"/Users/hayden/MEGA/lq_app/frontend/src/store.js","mtime":1550184876819},{"path":"/Users/hayden/MEGA/lq_app/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1549843455994},{"path":"/Users/hayden/MEGA/lq_app/frontend/node_modules/babel-loader/lib/index.js","mtime":1549843274850},{"path":"/Users/hayden/MEGA/lq_app/frontend/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1550181271447}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport callApi from './utils/ApiUtils';\nimport { ENVIRONMENT_URL } from './constants/ApiConstants';\nimport environmentDefaultState from './data/mockDataEnvironment';\nVue.use(Vuex);\n\nvar reformatByActuator = function reformatByActuator(_ref) {\n  var state = _ref.state,\n      levels = _ref.levels,\n      limits = _ref.limits;\n  return {\n    air: {\n      powerOn: state.Air\n    },\n    heater: {\n      powerOn: state.Heater,\n      level: Number(levels.Heater.level),\n      minTemp: limits.Heater['LOW-value'],\n      maxTemp: limits.Heater['HIGH-value']\n    },\n    lamp: {\n      powerOn: state.Lamp,\n      level: Number(levels.Lamp.level)\n    }\n  };\n}; // TODO: move to getters file\n\n\nvar getHeater = function getHeater(state) {\n  return state.environment.heater;\n};\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n    environment: environmentDefaultState\n  },\n  mutations: {\n    loadEnvironment: function loadEnvironment(state, environment) {\n      state.environment = environment;\n    },\n    toggleHeaterPower: function toggleHeaterPower(state) {\n      var _getHeater = getHeater(state),\n          powerOn = _getHeater.powerOn;\n\n      state.environment.heater.powerOn = !powerOn;\n    },\n    updateHeaterLevel: function updateHeaterLevel(state, level) {\n      state.environment.heater.level = level;\n    }\n  },\n  actions: {\n    // TODO: add a handler for errors\n    fetchEnvironmentState: function fetchEnvironmentState(_ref2) {\n      var commit = _ref2.commit;\n      callApi(ENVIRONMENT_URL).then(function (data) {\n        var reformattedState = reformatByActuator(data);\n        commit('loadEnvironment', reformattedState);\n      });\n    }\n  },\n  getters: {\n    heater: getHeater\n  }\n});",{"version":3,"sources":["/Users/hayden/MEGA/lq_app/frontend/src/store.js"],"names":["Vue","Vuex","callApi","ENVIRONMENT_URL","environmentDefaultState","use","reformatByActuator","state","levels","limits","air","powerOn","Air","heater","Heater","level","Number","minTemp","maxTemp","lamp","Lamp","getHeater","environment","Store","count","mutations","loadEnvironment","toggleHeaterPower","updateHeaterLevel","actions","fetchEnvironmentState","commit","then","data","reformattedState","getters"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AAEAJ,GAAG,CAACK,GAAJ,CAAQJ,IAAR;;AAEA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,MAAkBC,MAAlB,QAAkBA,MAAlB;AAAA,SAAgC;AACzDC,IAAAA,GAAG,EAAE;AACHC,MAAAA,OAAO,EAAEJ,KAAK,CAACK;AADZ,KADoD;AAIzDC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EAAEJ,KAAK,CAACO,MADT;AAENC,MAAAA,KAAK,EAAEC,MAAM,CAACR,MAAM,CAACM,MAAP,CAAcC,KAAf,CAFP;AAGNE,MAAAA,OAAO,EAAER,MAAM,CAACK,MAAP,CAAc,WAAd,CAHH;AAINI,MAAAA,OAAO,EAAET,MAAM,CAACK,MAAP,CAAc,YAAd;AAJH,KAJiD;AAUzDK,IAAAA,IAAI,EAAE;AACJR,MAAAA,OAAO,EAAEJ,KAAK,CAACa,IADX;AAEJL,MAAAA,KAAK,EAAEC,MAAM,CAACR,MAAM,CAACY,IAAP,CAAYL,KAAb;AAFT;AAVmD,GAAhC;AAAA,CAA3B,C,CAgBA;;;AACA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAAAd,KAAK;AAAA,SAAIA,KAAK,CAACe,WAAN,CAAkBT,MAAtB;AAAA,CAAvB;;AAEA,eAAe,IAAIZ,IAAI,CAACsB,KAAT,CAAe;AAC5BhB,EAAAA,KAAK,EAAE;AACLiB,IAAAA,KAAK,EAAE,CADF;AAELF,IAAAA,WAAW,EAAElB;AAFR,GADqB;AAK5BqB,EAAAA,SAAS,EAAE;AACTC,IAAAA,eADS,2BACOnB,KADP,EACce,WADd,EAC2B;AAClCf,MAAAA,KAAK,CAACe,WAAN,GAAoBA,WAApB;AACD,KAHQ;AAITK,IAAAA,iBAJS,6BAISpB,KAJT,EAIgB;AAAA,uBACHc,SAAS,CAACd,KAAD,CADN;AAAA,UACfI,OADe,cACfA,OADe;;AAEvBJ,MAAAA,KAAK,CAACe,WAAN,CAAkBT,MAAlB,CAAyBF,OAAzB,GAAmC,CAACA,OAApC;AACD,KAPQ;AAQTiB,IAAAA,iBARS,6BAQSrB,KART,EAQgBQ,KARhB,EAQuB;AAC9BR,MAAAA,KAAK,CAACe,WAAN,CAAkBT,MAAlB,CAAyBE,KAAzB,GAAiCA,KAAjC;AACD;AAVQ,GALiB;AAkB5Bc,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,qBAFO,wCAE2B;AAAA,UAAVC,MAAU,SAAVA,MAAU;AAChC7B,MAAAA,OAAO,CAACC,eAAD,CAAP,CACG6B,IADH,CACQ,UAACC,IAAD,EAAU;AACd,YAAMC,gBAAgB,GAAG5B,kBAAkB,CAAC2B,IAAD,CAA3C;AACAF,QAAAA,MAAM,CAAC,iBAAD,EAAoBG,gBAApB,CAAN;AACD,OAJH;AAKD;AARM,GAlBmB;AA4B5BC,EAAAA,OAAO,EAAE;AACPtB,IAAAA,MAAM,EAAEQ;AADD;AA5BmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\n\nimport callApi from './utils/ApiUtils';\nimport { ENVIRONMENT_URL } from './constants/ApiConstants';\nimport environmentDefaultState from './data/mockDataEnvironment';\n\nVue.use(Vuex);\n\nconst reformatByActuator = ({ state, levels, limits }) => ({\n  air: {\n    powerOn: state.Air,\n  },\n  heater: {\n    powerOn: state.Heater,\n    level: Number(levels.Heater.level),\n    minTemp: limits.Heater['LOW-value'],\n    maxTemp: limits.Heater['HIGH-value'],\n  },\n  lamp: {\n    powerOn: state.Lamp,\n    level: Number(levels.Lamp.level),\n  },\n});\n\n// TODO: move to getters file\nconst getHeater = state => state.environment.heater;\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n    environment: environmentDefaultState,\n  },\n  mutations: {\n    loadEnvironment(state, environment) {\n      state.environment = environment;\n    },\n    toggleHeaterPower(state) {\n      const { powerOn } = getHeater(state);\n      state.environment.heater.powerOn = !powerOn;\n    },\n    updateHeaterLevel(state, level) {\n      state.environment.heater.level = level;\n    },\n    // ...more mutations for updating air and light state\n  },\n  actions: {\n    // TODO: add a handler for errors\n    fetchEnvironmentState({ commit }) {\n      callApi(ENVIRONMENT_URL)\n        .then((data) => {\n          const reformattedState = reformatByActuator(data);\n          commit('loadEnvironment', reformattedState);\n        });\n    },\n  },\n  getters: {\n    heater: getHeater,\n  },\n});\n"]}]}